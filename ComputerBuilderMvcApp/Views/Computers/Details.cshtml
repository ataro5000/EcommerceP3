@model ComputerBuilderMvcApp.ViewModels.ComputerViewModel

@{
    ViewData["Title"] = Model.Name;
}

<h1>@Model.Name</h1>

<div>
    <h4>Base Price: @Model.TotalPrice.ToString("C")</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-3">Standard Components:</dt>
        <dd class="col-sm-9">
            <ul>
                @foreach (var component in Model.StandardComponents)
                {
                    <li>@component.Type: @component.Spec (@component.Price.ToString("C"))</li>
                }
            </ul>
        </dd>
    </dl>
</div>

@* Placeholder for customization form/options - this would be more complex *@
<div>
    <h3>Customize Your PC</h3>
    <form asp-action="Customize" asp-route-id="@Model.Id" method="post">
        @* Example for RAM customization - repeat for other component types *@
        @* You would populate AvailableComponents in your ViewModel *@
        @if (Model.AvailableComponents.Any(c => c.Type == "RAM"))
        {
            <div class="form-group">
                <label for="ramSelect">Select RAM:</label>
                <select name="SelectedComponents[RAM]" id="ramSelect" class="form-control">
                    @foreach (var ramOption in Model.AvailableComponents.Where(c => c.Type == "RAM"))
                    {
                        var currentRam = Model.StandardComponents.FirstOrDefault(sc => sc.Type == "RAM");
                        bool isSelected = currentRam != null && currentRam.Id == ramOption.Id;
                        <option value="@ramOption.Id" selected="@isSelected">@ramOption.Spec - @ramOption.Price.ToString("C")</option>
                    }
                </select>
            </div>
        }
        @* Add similar sections for CPU, GPU, HDD, etc. *@
        <button type="submit" class="btn btn-primary mt-3">Update Configuration & Add to Cart</button>
    </form>
</div>


<div class="mt-3">
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</div>